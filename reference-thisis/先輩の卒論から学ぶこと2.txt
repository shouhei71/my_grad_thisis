【特に学びたいこと】
・実験、実装(Cassnadraに対応)の解説
・実験へのもっていき方
・評価の方法(表現方法)
・関連研究、背景の書き方。
(図の使い方)


◇中村さんの論文から学ぶこと

●概要
大規模HPCにおいて、〇〇な問題があり、〇〇という技術がある。〇〇という技術とは、ああである。
しかし、まるまるなべきである。(あるが…)

ところが、最近A,Bの２つの問題点がある。
Aに対しては、a.Bにたいしては、ｂの対応してきた。
本研究では、a,bの併用を提案する。具体的には、これこれをじっそうし、評価した。
本手法を適用させた結果、〇〇であることをしました、であることがわかった。


●序章
・背景
HPCがどういうとこで注目を浴びているか、具体的にどこで利用されているか？
[からの●概要のネタコピ]

大規模HPCにおいて、〇〇な問題がある。
cordor
[具体的にこういう事例がある。具体的な技術。]
〇〇という技術がある。〇〇という技術とは、ああである。
(さらに深堀解説からの)
しかし、まるまるなべきである。
ところが、最近A,Bの２つの問題点がある。

これらの問題点の改善が求められている。

・目的
Aに対しては、a.Bにたいしては、ｂの対応してきた。
[a,b,に対する深彫り。]
本研究では、a,bの併用を提案する。具体的には、これこれをじっそうし、評価した。

・成果
本手法を適用させた結果、〇〇であることをしました、であることがわかった。
故に有効。

・論文の構成
構成の説明つらつら。


●背景
2.1
フォールトトラレントシステムについて述べる！具体的な実装例。フォルトトラレンスの分類。
(チェックポイントはフォルトとレスシステムの技術という包含関係。)

2.2
フォルトトラレンスからチェえくポイントに話題を移していく。チェえくポイントとは？
チェえくポイントの抱える問題点を列挙。具体亭にTOP50の0データを提示。

●関連研究
本研究に関連のある研究として、まずチェックポイント事態に関して行われる研究を述べ、次に〇〇を利用した研究を述べる。
3.1 Checkpointingの研究
チェックポインティングの関連研究として、丸々とまるあmるを上げる。
Aは、[概略](ライブラリ！)
Bは、[概略]

Aについて
-どうやってチェックポイントをとる？
->３つの取り方がある。
３種の紹介
-最適化について

Bについて
まるあmるでこんな問題店あがあった。そこで
〇〇を高改善しようとした研究があった。

●Cassandraてきな？Gosiip的な？
本研究の提案を述べる前にEasure condingの具体的なアルゴリズムと実装したライブらいについて述べる。
4,1まず深く関わっているガロア体、ガロア拡大体について詳細をのべる。
4.1.1ガロア体とは？(数式、図をつかって)
4.1.2ガロア拡大たいとは？(数式、図をつかって)
4.2 Jearasure
ライブラリです。何何ができます。
4.2.1のサンプルプログラムを動かした。(実行例の表示)


●提案と設計
関連研究の〇〇を利用して、Aが可能
まるあmるを利用して、Bが可能。
そこで本研究では、二つの技術を組み合わせることで〇〇と〇〇をどうじに実現できることを提案する。
〇〇を提案し、まるまるを実装した。
	まず、〇〇について概要を述べてから、それを設計する上で我々が設けた家庭について述べ、その後にその設計方針と通信方式について説明する。
5,1新システム
新システムのは次の３つの部分から構成される。
5.1.1 Parallel Erasure Coding
-デーモン、起動時からの流れ、役割、呼び名。
5.1.2 並列チェックポイント
-ライブラリを用いた。これで〇〇が可能となる。丸々するのにGXPタスクスケジューたーを用いた。
5.1.3 インクリメントチェックポイント
-丸々するのには、いくつか手段が考えられる。今回〇〇を選択した。


5.2設計上の仮定
箇条書き、(特に理由はなし？)

5.3checkpoint時の流れ？
？？

●新システムの実装
Jearasureは、C言語で実装されているため、Jaraライブらいの並列からcoodfsnの通信部にいたるまで実装はC言語を用いた。
まず、実装の各部分を説明し、ライブラリとして用いたBLCR,まるまるのために用いたGXPタスクスケジューラーについて述べる。
時間測定の方法について述べる。

6.1Jaraライブらいの並列
6.1.1 現状
メインのコードをならべる。(写真で,+コメント付きの文字で。)
6.1.2 実装
通常のソケットだと無理なわけを話す。
そこで、selectを利用した。
select関数周りの定義、
その返り値から以下のメソッドを定義。

6.2 チェックポイントライブラリの選択と並列議事インクリメンタルチェックポイント
チェックポイントの実装としてAとBのパターンがる。
Aとは、その欠点利点
Bとは、その欠点利点

そのなかで、Aタイプの実装のBLCRを選択した。
＠BLCRとは、〇〇である。１秒ごとにカウントをおこなうcount.cプログラムをBLCRでチェックポイントしたい場合は、まず以下のようにBLCRライムライトリンク付きしてコンパイルする。
[ライブらいの使い方をサンプルプログラムを使って解説。]

gcc sadfa
[実際のコマンドを提示。]
asdf
cr_checkpoint qwe


とするおｔダウンプできる。これは〇〇の時使える！

Aタイプの実装を選択した訳を説明

@BLCR-xdeltaによるインクリメントチェックポイント
〇〇にはまるあmるが実装されていないので、まるまるプログラムをりようした。
このプログラムを利用して、あｓｄふぁをした。これは別ほうほと比較して〇〇だ。
@gxpの利用。
　〇〇の並列化にはGXPタスクスケジューラを用いる。
このスケジューラーを実行するノードでgxpを起動し、そこで登録した複数ノードに対して六低ファイルに記載したジョブを一斉に投げることができる。


6.4 測定方法
6.4.1 まるまる時間の測定
どうやってはかったか？

6.4.2 チェックポイント時間の測定
時間の測定をどうやったか？

●新システムの評価
7.1 比較項目・実験環境
・比較項目としては、〇〇がある。

7.2 予備実験
[本実験に対してどういう位置づけ？]
逐次ノード(?)を対象に予備実験を行う。

データ量を変化させましたー！こういううグラフです！

7.3本実験
7.3.1 実験シナリオと測定内容
性能が上がるかを調べるために、
A、B、Cについて性能比較をおこなう。
測定は、あ部、い部を独立して測定する。
あ部は、〇〇を測定ｓる。
い部は、〇〇を用いて、〇〇を測定する。ノード数を12,3,41と変化させて通信量変化を見る。

あ部をサーチするために投げるプログラム
22と３３があります。プログラムの特徴を述べて多く。

7.3.3 BLCR+diffにおける問題点の克服
今回は、Incremental Checkpointを実装した適当なチェックポイントライブラリが見つからなかったのでh、
〇〇で代用した。

ところが、こういう問題店があった。

そこで丸々するという手法をとった。

7.4測定環境
7.5測定
7.5.1あ部
MATで、それぞれ項目の比較。図・グラフの説明が丁寧
7.6.1い部
同じく。

[図の考察について]


●まとめ




